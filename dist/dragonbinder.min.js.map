//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["deepFreeze","obj","Object","isFrozen","Array","isArray","i","l","length","props","Reflect","ownKeys","freeze","Dragonbinder","state","mutations","actions","getters","modules","shouldFreeze","namespace","rootStore","localState","this","Proxy","get","state2","prop","init","set","value","isUnfrozen","old","trigger","deleteProperty","defineProperty","frozen","plugins","childModuleNamespaces","keys","listeners","delete","beforecommit","commit","beforedispatch","dispatch","getter","addlistener","removelistener","plugin","registerModule","unregisterModule","getters2","store","key","getStore","error","enumerable","forEach","namespace2","n","prototype","fn","keyExists","objectname","object","Error","isFunction","type","callback","indexOf","parts","split","pop","moduleName","join","mutation","args","action","Promise","resolve","then","result","event","on","listener","push","off","index","splice","use","options","module2","newStore","assign","exports","__EXPORTS__","window","global"],"sources":["../lib/index.js"],"sourcesContent":["/**\n * This method is used to deep freeze an object\n * @param {Object} obj The object to freeze\n * @returns {Object} Object frozen\n */\nfunction deepFreeze(obj) {\n  if (typeof obj === \"object\" && obj !== null && !Object.isFrozen(obj)) {\n    if (Array.isArray(obj)) {\n      for (let i = 0, l = obj.length; i < l; i++) {\n        deepFreeze(obj[i]);\n      }\n    } else {\n      let props = Reflect.ownKeys(obj);\n      for (let i = 0, l = props.length; i < l; i++) {\n        deepFreeze(obj[props[i]]);\n      }\n    }\n    Object.freeze(obj);\n  }\n\n  return obj;\n}\n\n/**\n * This is the Store entity\n *\n * @constructor\n * @param {Object} data The initial options to create the store\n * @param {Object} [data.state] Optional initial state for the store\n * @param {Object} [data.mutations] Optional mutation methods to update the state\n * @param {Object} [data.actions] Optional actions to handle async methods and update the state\n * @param {Object} [data.getters] Optional getters to read from the state\n * @param {Object} [data.modules] Optional modules to register to this store\n * @param {Boolean} [data.shouldFreeze=true] Whether to freeze the state\n * @returns {Object} new store object\n */\nfunction Dragonbinder({\n  state,\n  mutations,\n  actions,\n  getters,\n  modules,\n  shouldFreeze = true,\n  namespace,\n  rootStore\n} = {}) {\n  // Initialize the localState for this store\n  let localState = typeof state === \"function\" ? state() : state;\n\n  /**\n   * We create a proxy for the state\n   * @type {Object}\n   * @name Dragonbinder.state\n   */\n  this.state = new Proxy(localState || {}, {\n    /**\n     * Every time we try to access a property from the state we try to deep freeze the property\n     * to prevent direct modifications to the state\n     *\n     * @type {Object}\n     * @name Dragonbinder.state.get\n     * @param {Object} state The state object\n     * @param {String} prop The property to read\n     * @returns {Any} The property value\n     */\n    get: (state, prop) => {\n      if ((this.rootStore || this).init.modules[prop]) {\n        return state[prop];\n      }\n      if (shouldFreeze) {\n        return deepFreeze(state[prop]);\n      }\n\n      return state[prop];\n    },\n\n    /**\n     * If the user tries to set directly it will throw an error, only if we have unfrozen the state via commit\n     * this will proceed to set the value\n     *\n     * @type {Object}\n     * @name Dragonbinder.state.set\n     * @param {Object} state The state object\n     * @param {String} prop The property to set\n     * @param {Any} value The property value\n     * @returns {Boolean} Always returns true\n     */\n    set: (state, prop, value) => {\n      this.isUnfrozen();\n      let old = state[prop];\n      state[prop] = value;\n      if (this.namespace) {\n        prop = `${this.namespace}.${prop}`;\n      }\n      (this.rootStore || this).trigger(\"set\", prop, value, old);\n      return true;\n    },\n\n    /**\n     * If the user tries to delete directly it will throw an error, only if we have unfrozen the state via commit\n     * this will proceed to delete the property\n     *\n     * @type {Object}\n     * @name Dragonbinder.state.deleteProperty\n     * @param {Object} state The state object\n     * @param {String} prop The property to delete\n     * @returns {Boolean} Always returns true\n     */\n    deleteProperty: (state, prop) => {\n      this.isUnfrozen();\n      let old = state[prop];\n      delete state[prop];\n      if (this.namespace) {\n        prop = `${this.namespace}.${prop}`;\n      }\n      (this.rootStore || this).trigger(\"delete\", prop, old);\n      return true;\n    }\n  });\n\n  /**\n   * We will define a hidden property to store the init data\n   *\n   * @type {Object}\n   * @name Dragonbinder.init\n   */\n  Object.defineProperty(this, \"init\", {\n    value: {\n      /**\n       * This property will store the frozen state of the store\n       *\n       * @type {Boolean}\n       * @name Dragonbinder.init.frozen\n       */\n      frozen: true,\n\n      /**\n       * This property will store the plugins\n       * @type {Array}\n       * @name Dragonbinder.init.plugins\n       */\n      plugins: [],\n\n      /**\n       * This property will store the registered modules\n       * @type {Object}\n       * @name Dragonbinder.init.modules\n       */\n      modules: {},\n\n      /**\n       * This will have the initial child module namespace definitions\n       * @type {Array}\n       * @name Dragonbinder.init.childModuleNamespaces\n       */\n      childModuleNamespaces: Object.keys(modules || {}),\n\n      /**\n       * This property will store the event listeners\n       * @type {Object}\n       * @name Dragonbinder.init.listeners\n       * @property {Array} listeners.set This will store the set event listeners\n       * @property {Array} listeners.delete This will store the delete event listeners\n       * @property {Array} listeners.beforecommit This will store the beforecommit event listeners\n       * @property {Array} listeners.commit This will store the commit event listeners\n       * @property {Array} listeners.beforedispatch This will store the beforedispatch event listeners\n       * @property {Array} listeners.dispatch This will store the dispatch event listeners\n       * @property {Array} listeners.getter This will store the getter event listeners\n       * @property {Array} listeners.addlistener This will store the addlistener event listeners\n       * @property {Array} listeners.removelistener This will store the removelistener event listeners\n       * @property {Array} listeners.plugin This will store the plugin event listeners\n       * @property {Array} listeners.registerModule This will store the registerModule event listeners\n       * @property {Array} listeners.unregisterModule This will store the unregisterModule event listeners\n       */\n      listeners: {\n        set: [],\n        delete: [],\n        beforecommit: [],\n        commit: [],\n        beforedispatch: [],\n        dispatch: [],\n        getter: [],\n        addlistener: [],\n        removelistener: [],\n        plugin: [],\n        registerModule: [],\n        unregisterModule: []\n      },\n\n      /**\n       * Set passed getters for future reference\n       * @type {Object}\n       * @name Dragonbinder.init.getters\n       */\n      getters: getters || {},\n\n      /**\n       * Set passed mutations for future reference\n       * @type {Object}\n       * @name Dragonbinder.init.mutations\n       */\n      mutations: mutations || {},\n      /**\n       * Set passed actions for future reference\n       * @type {Object}\n       * @name Dragonbinder.init.actions\n       */\n      actions: actions || {}\n    }\n  });\n\n  /**\n   * We create a proxy for the getters\n   * @type {Object}\n   * @name Dragonbinder.getters\n   */\n  this.getters = new Proxy(getters || {}, {\n    /**\n     * When we try to get a property of the getter we will call the original\n     * getter method passing the state as first argument and the other getters as second\n     * if we try to get a non existent getter it will fail silently as if\n     * we were trying to get an undefined property\n     *\n     * @type {Function}\n     * @name Dragonbinder.getters.get\n     * @param {Object} getters The getters object\n     * @param {String} getter The name of the getter to read\n     * @returns {Any} The value of the getter\n     */\n    get: (getters, getter) => {\n      try {\n        let { store, key } = this.getStore(this, getter);\n\n        if (store instanceof Dragonbinder && store.init.getters[key]) {\n          let value = store.init.getters[key](\n            store.state,\n            store.getters,\n            this.state,\n            this.getters\n          );\n          if (this.namespace) {\n            getter = `${this.namespace}.${getter}`;\n          }\n          (this.rootStore || this).trigger(\"getter\", getter, value);\n          return value;\n        }\n      } catch (error) {\n        return;\n      }\n    }\n  });\n\n  /**\n   * If this is a store been attached to another store\n   * this will have the rootStore for future reference\n   *\n   * @type {(Dragonbinder|Null)}\n   * @name Dragonbinder.rootStore\n   */\n  Object.defineProperty(this, \"rootStore\", {\n    value: rootStore || null,\n    enumerable: true\n  });\n\n  /**\n   * If this is a store been attached to another store\n   * this will have the namespace attached\n   *\n   * @type {(String|Null)}\n   * @name Dragonbinder.namespace\n   */\n  Object.defineProperty(this, \"namespace\", {\n    value: namespace || null,\n    enumerable: true\n  });\n\n  /**\n   * Finally we attach the initial modules\n   */\n  if (modules) {\n    Object.keys(modules).forEach((namespace) => {\n      let n = this.namespace ? `${this.namespace}.${namespace}` : namespace;\n      (this.rootStore || this).registerModule(n, modules[namespace]);\n    });\n  }\n}\n\nDragonbinder.prototype = Dragonbinder.fn = {\n  /**\n   * This method checks if a key exists in the object provided\n   * @throws {Error} Throws an error if the key does not exists\n   * @param {String} objectname The name of the object for log reference\n   * @param {Object} object The object in which we will search\n   * @param {Object} key The key to search for\n   * @returns {Void} //\n   */\n  keyExists(objectname, object, key) {\n    if (!object[key]) {\n      throw new Error(`The ${objectname} \"${key}\" does not exists.`);\n    }\n  },\n\n  /**\n   * This method checks the provided callback is a function\n   * @throws {Error} Throws an error if the callback is not a function\n   * @param {String} type The type to use for log reference\n   * @param {Object} callback The callback to check\n   * @returns {Void} //\n   */\n  isFunction(type, callback) {\n    if (typeof callback !== \"function\") {\n      throw new Error(`You need to provide a valid function as ${type}.`);\n    }\n  },\n\n  /**\n   * Giving a dot based namespace this method will be used to find the module to be called\n   * @param {Dragonbinder} store The store instance in which search for the namespaced module\n   * @param {String} namespace The namespace to search\n   * @returns {Object} {store, key} An object containing the found module as `store` and the final key as `key` property\n   */\n  getStore(store, namespace) {\n    let key = namespace;\n\n    if (key.indexOf(\".\") > -1) {\n      let parts = key.split(\".\");\n      key = parts.pop();\n      let moduleName = parts.join(\".\");\n      this.keyExists(\"module\", store.init.modules, moduleName);\n      store = store.init.modules[moduleName];\n    }\n\n    return {\n      store,\n      key\n    };\n  },\n\n  /**\n   * This method checks if the store is in a state able to mutate the state\n   * @throws {Error} Throws an error if the store is frozen\n   * @returns {Void} //\n   */\n  isUnfrozen() {\n    if (this.init.frozen) {\n      throw new Error(\"You need to commit a mutation to change the state\");\n    }\n  },\n\n  /**\n   * This method unfroze the state and process a mutation\n   * @throws This will trhow an error if the mutation does not exists\n   * @param {String} mutation The mutation name to process\n   * @param  {...any} [args] The arguments to pass to the mutation\n   * @returns {Void} Void\n   */\n  commit(mutation, ...args) {\n    let { store, key } = this.getStore(this, mutation);\n    this.keyExists(\"mutation\", store.init.mutations, key);\n\n    store.init.frozen = false;\n    this.trigger(\"beforecommit\", mutation, ...args);\n    store.init.mutations[key](store.state, ...args);\n    this.trigger(\"commit\", mutation, ...args);\n    store.init.frozen = true;\n  },\n\n  /**\n   * This method process an action\n   * @throws This will throw an error if the action does not exists\n   * @param {String} action The action name to process\n   * @param  {...any} [args] The arguments to pass to the action\n   * @returns {Promise} The action call as a promise\n   */\n  dispatch(action, ...args) {\n    let { store, key } = this.getStore(this, action);\n    this.keyExists(\"action\", store.init.actions, key);\n\n    store.init.frozen = false;\n    this.trigger(\"beforedispatch\", action, ...args);\n    return Promise.resolve(store.init.actions[key](store, ...args)).then(\n      (result) => {\n        this.trigger(\"dispatch\", action, ...args);\n        return result;\n      }\n    );\n  },\n\n  /**\n   * This method triggers an event\n   * @param {String} event The event name to trigger\n   * @param  {...any} [args] The arguments that will be passed to the listener\n   * @returns {Void} Void\n   */\n  trigger(event, ...args) {\n    this.init.listeners[event].forEach((callback) => callback(this, ...args));\n  },\n\n  /**\n   * This method adds an event listener to the store\n   * @throws This will throw an error if the listener is not a function\n   * @throws This will throw an error if the event does not exists\n   * @param {String} event The event to which to add the listener\n   * @param {Function} listener The listener to add\n   * @returns {Function} The function to unsubscribe\n   */\n  on(event, listener) {\n    this.isFunction(\"listener\", listener);\n    this.keyExists(\"event\", this.init.listeners, event);\n    if (this.init.listeners[event].indexOf(listener) === -1) {\n      this.init.listeners[event].push(listener);\n      this.trigger(\"addlistener\", event, listener);\n    }\n\n    return () => this.off(event, listener);\n  },\n\n  /**\n   * This method removes an event listener from the store\n   * @throws This will throw an error if the listener is not a function\n   * @throws This will throw an error if the event does not exists\n   * @param {String} event The event to which to remove the listener\n   * @param {Function} listener The listener to remove\n   * @returns {Void} Void\n   */\n  off(event, listener) {\n    this.isFunction(\"listener\", listener);\n    this.keyExists(\"event\", this.init.listeners, event);\n    let index = this.init.listeners[event].indexOf(listener);\n    if (index > -1) {\n      this.init.listeners[event].splice(index, 1);\n      this.trigger(\"removelistener\", event, listener);\n    }\n  },\n\n  /**\n   * This method adds a plugin to the Store\n   * @throws This will throw an error if the plugin is not a function\n   * @param {Function} plugin The plugin to add\n   * @param {...any} [options] The options passed to the plugin\n   * @returns {Void} Void\n   */\n  use(plugin, ...options) {\n    this.isFunction(\"plugin\", plugin);\n    if (this.init.plugins.indexOf(plugin) === -1) {\n      plugin(this, ...options);\n      this.init.plugins.push(plugin);\n      this.trigger(\"plugin\", plugin, ...options);\n    }\n  },\n\n  /**\n   * This method adds a module to the store\n   * @param {String} namespace The namespace to attach the module\n   * @param {Object} module The module definition\n   * @returns {Void} Void\n   */\n  registerModule(namespace, module) {\n    let rootStore = this;\n\n    if (rootStore.init.modules[namespace]) {\n      throw new Error(\n        `A module with the namespace \"${namespace}\" is already registered.`\n      );\n    }\n\n    let newStore = new Dragonbinder(\n      Object.assign({ rootStore, namespace }, module)\n    );\n\n    rootStore.init.frozen = false;\n    rootStore.init.modules[namespace] = newStore;\n    rootStore.state[namespace] = newStore.state;\n    rootStore.init.frozen = true;\n    rootStore.trigger(\"registerModule\", namespace, module, newStore);\n  },\n\n  /**\n   * This method removes a module from the store\n   * @param {String} namespace The namespace of the attached module\n   * @returns {Void} Void\n   */\n  unregisterModule(namespace) {\n    let rootStore = this;\n    let store = rootStore.init.modules[namespace];\n\n    if (store) {\n      store.init.childModuleNamespaces.forEach((n) =>\n        rootStore.unregisterModule(`${namespace}.${n}`)\n      );\n\n      rootStore.init.frozen = false;\n      delete rootStore.init.modules[namespace];\n      delete rootStore.state[namespace];\n      rootStore.init.frozen = true;\n      rootStore.trigger(\"unregisterModule\", namespace, store);\n    }\n  }\n};\n\nDragonbinder.fn = Dragonbinder.prototype;\n\nif (typeof exports === \"object\") {\n  module.exports = Dragonbinder;\n} else {\n  (typeof window === \"undefined\" ? global : window).Dragonbinder = Dragonbinder;\n}\n"],"mappings":"MAKA,SAAAA,EAAoBC,GAClB,GAAmB,iBAARA,GAA4B,OAARA,IAAiBC,OAAOC,SAASF,GAAM,CACpE,GAAIG,MAAMC,QAAQJ,GAChB,QAASK,EAAI,EAAGC,EAAIN,EAAIO,OAAQF,EAAIC,EAAGD,IACrCN,EAAWC,EAAIK,QAEZ,CACL,IAAIG,EAAQC,QAAQC,QAAQV,GAC5B,QAASK,EAAI,EAAGC,EAAIE,EAAMD,OAAQF,EAAIC,EAAGD,IACvCN,EAAWC,EAAIQ,EAAMH,KAGzBJ,OAAOU,OAAOX,GAGhB,OAAOA,EAgBT,SAAAY,GAAsBC,MACpBA,EAAAC,UACAA,EAAAC,QACAA,EAAAC,QACAA,EAAAC,QACAA,EAAAC,aACAA,GAAe,EAAAC,UACfA,EAAAC,UACAA,GACE,IAEF,IAAIC,EAA8B,mBAAVR,EAAuBA,IAAUA,EAOzDS,KAAKT,MAAQ,IAAIU,MAAMF,GAAc,GAAI,CAWvCG,IAAK,CAACC,EAAOC,KACNJ,KAAKF,WAAaE,MAAMK,KAAKV,QAAQS,GACjCD,EAAMC,GAEXR,EACKnB,EAAW0B,EAAMC,IAGnBD,EAAMC,GAcfE,IAAK,CAACH,EAAOC,EAAMG,KACjBP,KAAKQ,aACL,IAAIC,EAAMN,EAAMC,GAMhB,OALAD,EAAMC,GAAQG,EACVP,KAAKH,YACPO,EAAO,GAAGJ,KAAKH,aAAaO,MAE7BJ,KAAKF,WAAaE,MAAMU,QAAQ,MAAON,EAAMG,EAAOE,IAC9C,GAaTE,eAAgB,CAACR,EAAOC,KACtBJ,KAAKQ,aACL,IAAIC,EAAMN,EAAMC,GAMhB,cALOD,EAAMC,GACTJ,KAAKH,YACPO,EAAO,GAAGJ,KAAKH,aAAaO,MAE7BJ,KAAKF,WAAaE,MAAMU,QAAQ,SAAUN,EAAMK,IAC1C,KAUX9B,OAAOiC,eAAeZ,KAAM,OAAQ,CAClCO,MAAO,CAOLM,QAAQ,EAORC,QAAS,GAOTnB,QAAS,GAOToB,sBAAuBpC,OAAOqC,KAAKrB,GAAW,IAmB9CsB,UAAW,CACTX,IAAK,GACLY,OAAQ,GACRC,aAAc,GACdC,OAAQ,GACRC,eAAgB,GAChBC,SAAU,GACVC,OAAQ,GACRC,YAAa,GACbC,eAAgB,GAChBC,OAAQ,GACRC,eAAgB,GAChBC,iBAAkB,IAQpBlC,QAASA,GAAW,GAOpBF,UAAWA,GAAa,GAMxBC,QAASA,GAAW,MASxBO,KAAKN,QAAU,IAAIO,MAAMP,GAAW,GAAI,CAatCQ,IAAK,CAAC2B,EAASN,KACb,IACE,IAAIO,MAAEA,EAAAC,IAAOA,GAAQ/B,KAAKgC,SAAShC,KAAMuB,GAEzC,GAAIO,aAAiBxC,GAAgBwC,EAAMzB,KAAKX,QAAQqC,GAAM,CAC5D,IAAIxB,EAAQuB,EAAMzB,KAAKX,QAAQqC,GAC7BD,EAAMvC,MACNuC,EAAMpC,QACNM,KAAKT,MACLS,KAAKN,SAMP,OAJIM,KAAKH,YACP0B,EAAS,GAAGvB,KAAKH,aAAa0B,MAE/BvB,KAAKF,WAAaE,MAAMU,QAAQ,SAAUa,EAAQhB,GAC5CA,GAEX,MAAS0B,GACP,WAYNtD,OAAOiC,eAAeZ,KAAM,YAAa,CACvCO,MAAOT,GAAa,KACpBoC,YAAY,IAUdvD,OAAOiC,eAAeZ,KAAM,YAAa,CACvCO,MAAOV,GAAa,KACpBqC,YAAY,IAMVvC,GACFhB,OAAOqC,KAAKrB,GAASwC,QAASC,IAC5B,IAAIC,EAAIrC,KAAKH,UAAY,GAAGG,KAAKH,aAAauC,IAAcA,GAC3DpC,KAAKF,WAAaE,MAAM2B,eAAeU,EAAG1C,EAAQyC,MA4NzD,GAvNA9C,EAAagD,UAAYhD,EAAaiD,GAAK,CASzCC,UAAUC,EAAYC,EAAQX,GAC5B,IAAKW,EAAOX,GACV,MAAM,IAAIY,MAAM,OAAOF,MAAeV,wBAW1Ca,WAAWC,EAAMC,GACf,GAAwB,mBAAbA,EACT,MAAM,IAAIH,MAAM,2CAA2CE,OAU/Db,SAASF,EAAOjC,GACd,IAAIkC,EAAMlC,EAEV,GAAIkC,EAAIgB,QAAQ,MAAO,EAAI,CACzB,IAAIC,EAAQjB,EAAIkB,MAAM,KACtBlB,EAAMiB,EAAME,MACZ,IAAIC,EAAaH,EAAMI,KAAK,KAC5BpD,KAAKwC,UAAU,SAAUV,EAAMzB,KAAKV,QAASwD,GAC7CrB,EAAQA,EAAMzB,KAAKV,QAAQwD,GAG7B,MAAO,CACLrB,QACAC,QASJvB,aACE,GAAIR,KAAKK,KAAKQ,OACZ,MAAM,IAAI8B,MAAM,sDAWpBvB,OAAOiC,KAAaC,GAClB,IAAIxB,MAAEA,EAAAC,IAAOA,GAAQ/B,KAAKgC,SAAShC,KAAMqD,GACzCrD,KAAKwC,UAAU,WAAYV,EAAMzB,KAAKb,UAAWuC,GAEjDD,EAAMzB,KAAKQ,QAAS,EACpBb,KAAKU,QAAQ,eAAgB2C,KAAaC,GAC1CxB,EAAMzB,KAAKb,UAAUuC,GAAKD,EAAMvC,SAAU+D,GAC1CtD,KAAKU,QAAQ,SAAU2C,KAAaC,GACpCxB,EAAMzB,KAAKQ,QAAS,GAUtBS,SAASiC,KAAWD,GAClB,IAAIxB,MAAEA,EAAAC,IAAOA,GAAQ/B,KAAKgC,SAAShC,KAAMuD,GAKzC,OAJAvD,KAAKwC,UAAU,SAAUV,EAAMzB,KAAKZ,QAASsC,GAE7CD,EAAMzB,KAAKQ,QAAS,EACpBb,KAAKU,QAAQ,iBAAkB6C,KAAWD,GACnCE,QAAQC,QAAQ3B,EAAMzB,KAAKZ,QAAQsC,GAAKD,KAAUwB,IAAOI,KAC7DC,IACC3D,KAAKU,QAAQ,WAAY6C,KAAWD,GAC7BK,KAWbjD,QAAQkD,KAAUN,GAChBtD,KAAKK,KAAKY,UAAU2C,GAAOzB,QAASW,GAAaA,EAAS9C,QAASsD,KAWrEO,GAAGD,EAAOE,GAQR,OAPA9D,KAAK4C,WAAW,WAAYkB,GAC5B9D,KAAKwC,UAAU,QAASxC,KAAKK,KAAKY,UAAW2C,IACQ,IAAjD5D,KAAKK,KAAKY,UAAU2C,GAAOb,QAAQe,KACrC9D,KAAKK,KAAKY,UAAU2C,GAAOG,KAAKD,GAChC9D,KAAKU,QAAQ,cAAekD,EAAOE,IAG9B,IAAM9D,KAAKgE,IAAIJ,EAAOE,IAW/BE,IAAIJ,EAAOE,GACT9D,KAAK4C,WAAW,WAAYkB,GAC5B9D,KAAKwC,UAAU,QAASxC,KAAKK,KAAKY,UAAW2C,GAC7C,IAAIK,EAAQjE,KAAKK,KAAKY,UAAU2C,GAAOb,QAAQe,GAC3CG,GAAQ,IACVjE,KAAKK,KAAKY,UAAU2C,GAAOM,OAAOD,EAAO,GACzCjE,KAAKU,QAAQ,iBAAkBkD,EAAOE,KAW1CK,IAAIzC,KAAW0C,GACbpE,KAAK4C,WAAW,SAAUlB,IACgB,IAAtC1B,KAAKK,KAAKS,QAAQiC,QAAQrB,KAC5BA,EAAO1B,QAASoE,GAChBpE,KAAKK,KAAKS,QAAQiD,KAAKrC,GACvB1B,KAAKU,QAAQ,SAAUgB,KAAW0C,KAUtCzC,eAAe9B,EAAWwE,GACxB,IAAIvE,EAAYE,KAEhB,GAAIF,EAAUO,KAAKV,QAAQE,GACzB,MAAM,IAAI8C,MACR,gCAAgC9C,6BAIpC,IAAIyE,EAAW,IAAIhF,EACjBX,OAAO4F,OAAO,CAAEzE,YAAWD,aAAawE,IAG1CvE,EAAUO,KAAKQ,QAAS,EACxBf,EAAUO,KAAKV,QAAQE,GAAayE,EACpCxE,EAAUP,MAAMM,GAAayE,EAAS/E,MACtCO,EAAUO,KAAKQ,QAAS,EACxBf,EAAUY,QAAQ,iBAAkBb,EAAWwE,EAAQC,IAQzD1C,iBAAiB/B,GACf,IAAIC,EAAYE,KACZ8B,EAAQhC,EAAUO,KAAKV,QAAQE,GAE/BiC,IACFA,EAAMzB,KAAKU,sBAAsBoB,QAASE,GACxCvC,EAAU8B,iBAAiB,GAAG/B,KAAawC,MAG7CvC,EAAUO,KAAKQ,QAAS,SACjBf,EAAUO,KAAKV,QAAQE,UACvBC,EAAUP,MAAMM,GACvBC,EAAUO,KAAKQ,QAAS,EACxBf,EAAUY,QAAQ,mBAAoBb,EAAWiC,MAKvDxC,EAAaiD,GAAKjD,EAAagD,UAER,iBAAZkC,QACT,IAAAC,EAAOnF,OAEY,oBAAXoF,OAAyBC,OAASD,QAAQpF,aAAeA,E"}